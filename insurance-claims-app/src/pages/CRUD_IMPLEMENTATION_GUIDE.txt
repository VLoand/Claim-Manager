# CRUD Implementation Guide for Presentation/Defense

This file contains all the code needed to implement additional CRUDs for the project defense.
This code is NOT executed - it's for reference and demonstration purposes only.

## Table of Contents
1. Insurance Companies CRUD (Simple Example)
2. Documents/Attachments CRUD (Complex Example)
3. Notifications CRUD (Real-time Example)

================================================================================
## 1. INSURANCE COMPANIES CRUD - COMPLETE EXAMPLE
================================================================================

## Backend: config/postgres.js
```javascript
// Add this to the createTables function
await client.query(`
  CREATE TABLE IF NOT EXISTS insurance_companies (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    contact_email VARCHAR(255),
    contact_phone VARCHAR(50),
    address TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )
`);

// Insert some default data
await client.query(`
  INSERT INTO insurance_companies (name, contact_email, contact_phone) 
  VALUES 
    ('State Farm', 'contact@statefarm.com', '1-800-STATE-FARM'),
    ('Geico', 'support@geico.com', '1-800-GEICO'),
    ('Progressive', 'help@progressive.com', '1-800-PROGRESSIVE'),
    ('Allstate', 'contact@allstate.com', '1-800-ALLSTATE')
  ON CONFLICT (name) DO NOTHING
`);
```

## Backend: routes/insuranceCompanies.js
```javascript
import express from 'express';
import { body, validationResult } from 'express-validator';
import { query } from '../config/postgres.js';
import { authenticateToken, authorizeRoles } from '../middleware/auth.js';

const router = express.Router();

// Validation rules
const createCompanyValidation = [
  body('name').trim().isLength({ min: 2 }).withMessage('Company name is required'),
  body('contact_email').optional().isEmail().withMessage('Valid email required'),
  body('contact_phone').optional().isMobilePhone().withMessage('Valid phone required'),
  body('address').optional().trim()
];

// CREATE - Add new insurance company (Admin only)
router.post('/', authenticateToken, authorizeRoles('admin'), createCompanyValidation, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation failed',
        details: errors.array()
      });
    }

    const { name, contact_email, contact_phone, address } = req.body;

    const result = await query(`
      INSERT INTO insurance_companies (name, contact_email, contact_phone, address)
      VALUES ($1, $2, $3, $4)
      RETURNING *
    `, [name, contact_email, contact_phone, address]);

    res.status(201).json({
      message: 'Insurance company created successfully',
      company: result.rows[0]
    });
  } catch (error) {
    if (error.code === '23505') { // Duplicate name
      return res.status(409).json({
        error: 'Company already exists',
        message: 'An insurance company with this name already exists'
      });
    }
    console.error('Error creating insurance company:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// READ - Get all insurance companies
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { active_only = 'true', page = 1, limit = 50 } = req.query;
    const offset = (page - 1) * limit;

    let whereClause = '';
    const params = [];

    if (active_only === 'true') {
      whereClause = 'WHERE is_active = true';
    }

    const result = await query(`
      SELECT * FROM insurance_companies 
      ${whereClause}
      ORDER BY name ASC 
      LIMIT $${params.length + 1} OFFSET $${params.length + 2}
    `, [...params, limit, offset]);

    const countResult = await query(`
      SELECT COUNT(*) FROM insurance_companies ${whereClause}
    `, params);

    res.json({
      companies: result.rows,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(parseInt(countResult.rows[0].count) / limit),
        totalCompanies: parseInt(countResult.rows[0].count),
        limit: parseInt(limit)
      }
    });
  } catch (error) {
    console.error('Error fetching insurance companies:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// READ - Get single insurance company
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    const result = await query('SELECT * FROM insurance_companies WHERE id = $1', [id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({
        error: 'Company not found',
        message: 'The specified insurance company does not exist'
      });
    }

    res.json({ company: result.rows[0] });
  } catch (error) {
    console.error('Error fetching insurance company:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// UPDATE - Update insurance company (Admin only)
router.put('/:id', authenticateToken, authorizeRoles('admin'), createCompanyValidation, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation failed',
        details: errors.array()
      });
    }

    const { id } = req.params;
    const { name, contact_email, contact_phone, address } = req.body;

    const result = await query(`
      UPDATE insurance_companies 
      SET name = $1, contact_email = $2, contact_phone = $3, address = $4, updated_at = CURRENT_TIMESTAMP
      WHERE id = $5
      RETURNING *
    `, [name, contact_email, contact_phone, address, id]);

    if (result.rows.length === 0) {
      return res.status(404).json({
        error: 'Company not found',
        message: 'The specified insurance company does not exist'
      });
    }

    res.json({
      message: 'Insurance company updated successfully',
      company: result.rows[0]
    });
  } catch (error) {
    console.error('Error updating insurance company:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// DELETE - Soft delete insurance company (Admin only)
router.delete('/:id', authenticateToken, authorizeRoles('admin'), async (req, res) => {
  try {
    const { id } = req.params;

    // Check if company is used in any claims
    const claimsCheck = await query(
      'SELECT COUNT(*) FROM claims WHERE insurance_company = (SELECT name FROM insurance_companies WHERE id = $1)',
      [id]
    );

    if (parseInt(claimsCheck.rows[0].count) > 0) {
      return res.status(400).json({
        error: 'Cannot delete company',
        message: 'This insurance company is referenced by existing claims. Use deactivate instead.'
      });
    }

    const result = await query(`
      UPDATE insurance_companies 
      SET is_active = false, updated_at = CURRENT_TIMESTAMP
      WHERE id = $1
      RETURNING *
    `, [id]);

    if (result.rows.length === 0) {
      return res.status(404).json({
        error: 'Company not found',
        message: 'The specified insurance company does not exist'
      });
    }

    res.json({
      message: 'Insurance company deactivated successfully',
      company: result.rows[0]
    });
  } catch (error) {
    console.error('Error deleting insurance company:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

export default router;
```

## Backend: server.js
```javascript
// Add this import
import insuranceCompaniesRoutes from './routes/insuranceCompanies.js';

// Add this route
app.use('/api/insurance-companies', insuranceCompaniesRoutes);
```

## Frontend: services/api.js
```javascript
// Add these functions to the API class

// Insurance Companies API
async getInsuranceCompanies(params = {}) {
  const queryParams = new URLSearchParams(params).toString();
  const url = queryParams ? `/insurance-companies?${queryParams}` : '/insurance-companies';
  
  const response = await this.request('GET', url);
  return response.companies;
}

async getInsuranceCompany(id) {
  const response = await this.request('GET', `/insurance-companies/${id}`);
  return response.company;
}

async createInsuranceCompany(companyData) {
  const response = await this.request('POST', '/insurance-companies', companyData);
  return response.company;
}

async updateInsuranceCompany(id, companyData) {
  const response = await this.request('PUT', `/insurance-companies/${id}`, companyData);
  return response.company;
}

async deleteInsuranceCompany(id) {
  const response = await this.request('DELETE', `/insurance-companies/${id}`);
  return response.company;
}
```

## Frontend: contexts/InsuranceCompaniesContext.jsx
```javascript
import { createContext, useContext, useReducer } from 'react';
import { api } from '../services/api';

const InsuranceCompaniesContext = createContext();

const initialState = {
  companies: [],
  loading: false,
  error: null,
  selectedCompany: null
};

function insuranceCompaniesReducer(state, action) {
  switch (action.type) {
    case 'SET_LOADING':
      return { ...state, loading: action.payload };
    case 'SET_ERROR':
      return { ...state, error: action.payload, loading: false };
    case 'SET_COMPANIES':
      return { ...state, companies: action.payload, loading: false, error: null };
    case 'ADD_COMPANY':
      return { ...state, companies: [...state.companies, action.payload] };
    case 'UPDATE_COMPANY':
      return {
        ...state,
        companies: state.companies.map(company =>
          company.id === action.payload.id ? action.payload : company
        )
      };
    case 'REMOVE_COMPANY':
      return {
        ...state,
        companies: state.companies.filter(company => company.id !== action.payload)
      };
    case 'SET_SELECTED_COMPANY':
      return { ...state, selectedCompany: action.payload };
    case 'CLEAR_ERROR':
      return { ...state, error: null };
    default:
      return state;
  }
}

export function InsuranceCompaniesProvider({ children }) {
  const [state, dispatch] = useReducer(insuranceCompaniesReducer, initialState);

  const fetchCompanies = async (params = {}) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const companies = await api.getInsuranceCompanies(params);
      dispatch({ type: 'SET_COMPANIES', payload: companies });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error.message });
    }
  };

  const createCompany = async (companyData) => {
    try {
      const newCompany = await api.createInsuranceCompany(companyData);
      dispatch({ type: 'ADD_COMPANY', payload: newCompany });
      return newCompany;
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error.message });
      throw error;
    }
  };

  const updateCompany = async (id, companyData) => {
    try {
      const updatedCompany = await api.updateInsuranceCompany(id, companyData);
      dispatch({ type: 'UPDATE_COMPANY', payload: updatedCompany });
      return updatedCompany;
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error.message });
      throw error;
    }
  };

  const deleteCompany = async (id) => {
    try {
      await api.deleteInsuranceCompany(id);
      dispatch({ type: 'REMOVE_COMPANY', payload: id });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error.message });
      throw error;
    }
  };

  const clearError = () => {
    dispatch({ type: 'CLEAR_ERROR' });
  };

  const value = {
    ...state,
    fetchCompanies,
    createCompany,
    updateCompany,
    deleteCompany,
    clearError
  };

  return (
    <InsuranceCompaniesContext.Provider value={value}>
      {children}
    </InsuranceCompaniesContext.Provider>
  );
}

export function useInsuranceCompanies() {
  const context = useContext(InsuranceCompaniesContext);
  if (!context) {
    throw new Error('useInsuranceCompanies must be used within InsuranceCompaniesProvider');
  }
  return context;
}
```

## Frontend: pages/InsuranceCompaniesManagement.jsx
```javascript
import { useState, useEffect } from 'react';
import { useInsuranceCompanies } from '../contexts/InsuranceCompaniesContext';
import { useAuth } from '../contexts/AppContext';

export default function InsuranceCompaniesManagement() {
  const { user } = useAuth();
  const {
    companies,
    loading,
    error,
    fetchCompanies,
    createCompany,
    updateCompany,
    deleteCompany,
    clearError
  } = useInsuranceCompanies();

  const [showForm, setShowForm] = useState(false);
  const [editingCompany, setEditingCompany] = useState(null);
  const [formData, setFormData] = useState({
    name: '',
    contact_email: '',
    contact_phone: '',
    address: ''
  });

  useEffect(() => {
    fetchCompanies();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editingCompany) {
        await updateCompany(editingCompany.id, formData);
      } else {
        await createCompany(formData);
      }
      setFormData({ name: '', contact_email: '', contact_phone: '', address: '' });
      setShowForm(false);
      setEditingCompany(null);
    } catch (error) {
      // Error handled by context
    }
  };

  const handleEdit = (company) => {
    setEditingCompany(company);
    setFormData({
      name: company.name,
      contact_email: company.contact_email || '',
      contact_phone: company.contact_phone || '',
      address: company.address || ''
    });
    setShowForm(true);
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to deactivate this insurance company?')) {
      await deleteCompany(id);
    }
  };

  if (!user || user.role !== 'admin') {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          Access denied. Admin privileges required.
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-900">Insurance Companies</h1>
        <button
          onClick={() => {
            setShowForm(true);
            setEditingCompany(null);
            setFormData({ name: '', contact_email: '', contact_phone: '', address: '' });
          }}
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
        >
          Add Company
        </button>
      </div>

      {/* Error Display */}
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
          <button
            onClick={clearError}
            className="float-right text-red-700 hover:text-red-900"
          >
            ×
          </button>
        </div>
      )}

      {/* Form Modal */}
      {showForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">
              {editingCompany ? 'Edit Company' : 'Add Company'}
            </h2>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Company Name *
                </label>
                <input
                  type="text"
                  required
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Contact Email
                </label>
                <input
                  type="email"
                  value={formData.contact_email}
                  onChange={(e) => setFormData({ ...formData, contact_email: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Contact Phone
                </label>
                <input
                  type="tel"
                  value={formData.contact_phone}
                  onChange={(e) => setFormData({ ...formData, contact_phone: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Address
                </label>
                <textarea
                  value={formData.address}
                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  rows="3"
                />
              </div>
              <div className="flex space-x-3">
                <button
                  type="submit"
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-lg transition-colors"
                >
                  {editingCompany ? 'Update' : 'Create'}
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setShowForm(false);
                    setEditingCompany(null);
                  }}
                  className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 rounded-lg transition-colors"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Companies List */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        {loading ? (
          <div className="p-6 text-center">Loading companies...</div>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Company Name
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Contact Email
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Contact Phone
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {companies.map((company) => (
                  <tr key={company.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="font-medium text-gray-900">{company.name}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-gray-500">
                      {company.contact_email || 'N/A'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-gray-500">
                      {company.contact_phone || 'N/A'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        company.is_active 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {company.is_active ? 'Active' : 'Inactive'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                      <button
                        onClick={() => handleEdit(company)}
                        className="text-indigo-600 hover:text-indigo-900"
                      >
                        Edit
                      </button>
                      <button
                        onClick={() => handleDelete(company.id)}
                        className="text-red-600 hover:text-red-900"
                      >
                        Deactivate
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}
```

## Frontend: App.jsx
```javascript
// Add this import
import { InsuranceCompaniesProvider } from './contexts/InsuranceCompaniesContext';
import InsuranceCompaniesManagement from './pages/InsuranceCompaniesManagement';

// Update the AppProviders to include InsuranceCompaniesProvider
function AppProviders({ children }) {
  return (
    <AuthProvider>
      <ClaimsProvider>
        <InsuranceCompaniesProvider>
          {children}
        </InsuranceCompaniesProvider>
      </ClaimsProvider>
    </AuthProvider>
  );
}

// Add this route in the Routes section
<Route path="/admin/insurance-companies" element={
  <ProtectedRoute adminOnly>
    <InsuranceCompaniesManagement />
  </ProtectedRoute>
} />
```

================================================================================
## PRESENTATION DEFENSE STRATEGY
================================================================================

## What to Say During Defense:

### 1. "I chose Insurance Companies CRUD because..."
- "It demonstrates proper data normalization"
- "Shows relationship with existing Claims entity"
- "Implements proper validation and error handling"
- "Uses both PostgreSQL (structured data) and includes admin controls"

### 2. "The CRUD operations include..."
- "CREATE: Admin can add new insurance companies with validation"
- "READ: Users can view active companies, admins see all with pagination"
- "UPDATE: Full company information updates with audit trail"
- "DELETE: Soft delete to preserve data integrity in existing claims"

### 3. "I implemented business logic like..."
- "Preventing deletion of companies referenced in claims"
- "Role-based access (only admins can modify)"
- "Soft delete instead of hard delete for data integrity"
- "Pagination and filtering for performance"

### 4. "The frontend includes..."
- "React context for state management"
- "Modal forms for create/edit operations"
- "Table display with actions"
- "Error handling and loading states"
- "Responsive design"

### 5. "This connects to existing system by..."
- "Claims reference insurance companies"
- "Maintains data consistency"
- "Follows same authentication/authorization patterns"
- "Uses established API patterns"

================================================================================
## DIFFICULTY ASSESSMENT
================================================================================

## Is it difficult? NO - Here's why:

### Backend (Medium Difficulty)
- ✅ Database table creation (copy existing pattern)
- ✅ Express routes (follow claims.js structure)  
- ✅ Validation rules (use express-validator like existing)
- ✅ Error handling (copy existing patterns)
- ⚠️ Only challenging part: Business logic for relationships

### Frontend (Easy to Medium)
- ✅ Context/Reducer pattern (copy existing structure)
- ✅ API service calls (follow existing api.js pattern)
- ✅ Form handling (similar to ClaimSubmission)
- ✅ Table display (similar to ClaimReview)
- ⚠️ Only challenging part: Modal UI and state management

### Time Estimate: 2-4 hours for complete implementation

### What Makes It Easy:
1. **Existing Patterns**: Copy structure from Claims/Users
2. **Simple Entity**: Insurance companies are straightforward
3. **Standard CRUD**: No complex business logic required
4. **UI Components**: Reuse existing form/table patterns
5. **Well-Documented**: Clear examples in existing code

### Defense Advantage:
- Shows you understand the codebase
- Demonstrates ability to extend existing architecture
- Proves knowledge of full-stack development
- Simple enough to explain confidently
- Complex enough to show skill

## Confidence Level: HIGH ✅
This CRUD implementation follows established patterns and would be straightforward to present and defend!